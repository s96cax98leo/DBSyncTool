# Kafka Consumer Properties
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=transform-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Configure trusted packages for JsonDeserializer to prevent Insecure Deserialization vulnerabilities
spring.kafka.consumer.properties.spring.json.trusted.packages=com.yt.etl.common.model,java.util,java.lang
# Allow specific type mappings if needed, or rely on default type id headers.
# spring.kafka.consumer.properties.spring.json.type.mapping=dataRecordBatch:com.yt.etl.common.model.DataRecordBatch

# Kafka Producer Properties
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# spring.kafka.producer.properties.spring.json.add.type.headers=false
# If producer.properties.spring.json.add.type.headers is false, the consumer needs to know the target type.
# This can be done by setting spring.kafka.consumer.value-default-type
spring.kafka.consumer.properties.spring.json.value.defaultType=com.yt.etl.common.model.DataRecordBatch


# Application Specific Topic Names
etl.topics.input.untransformed=untransformed-data-topic
etl.topics.output.transformed=transformed-data-topic

# Logging
logging.level.com.yt.etl.transform=INFO
logging.level.org.springframework.kafka=INFO
logging.level.org.apache.kafka=WARN

# Default Spring Boot Actuator endpoints (optional, but good for monitoring)
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.tags.application=${spring.application.name}

# Spring Application Name
spring.application.name=etl-transform-service
